{"mappings":"IAQAA,EARqB,EAACC,KAAEA,EAAIC,OAAEA,EAAMC,GAAEA,KAAS,kEACfF,0CACEC,2BACfC,8E,ICInBC,EAPa,CACX,CAAED,GAAI,OAAQF,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEC,GAAI,OAAQF,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEC,GAAI,OAAQF,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEC,GAAI,OAAQF,KAAM,iBAAkBC,OAAQ,c,ICChDG,EALa,CACXC,KAAMC,SAASC,eAAe,QAC9BC,KAAMF,SAASC,eAAe,iBCDzB,IAkBIE,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACZ,EAAIa,IAGrDb,IAFFa,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,I,IC7BLG,EAAe,C,SAHE,W,UACC,aC0BlBd,EAAKC,KAAKc,iBAAiB,UArBRC,I,IAGDC,EAFhBD,EAAME,iBAEN,MAAMC,EAAyD,QAA/CF,EAAAG,KAAKC,MAAMC,aAAaC,QAAQT,EAAKU,kBAAU,IAA/CP,IAAmDlB,GAE7DH,KAAEA,EAAIC,OAAEA,GAAWmB,EAAMS,cAAcC,SACxC9B,GAASC,GAIdsB,EAAQQ,KAAK,CAAE/B,KAAMA,EAAKgC,MAAO/B,OAAQA,EAAO+B,MAAO9B,GAAIO,MAC3DL,EAAKI,KAAKyB,mBACR,YACAlC,EAAawB,EAAQA,EAAQW,OAAS,KAGxCR,aAAaS,QAAQjB,EAAKU,SAAUJ,KAAKY,UAAUb,IAEnDH,EAAMS,cAAcQ,SAXlBC,MAAM,yBAgBV,MAAMC,EAAW,CAAEvC,KAAM,GAAIC,OAAQ,IAMrCG,EAAKC,KAAKc,iBAAiB,SAJLqB,IACpBD,EAASC,EAAEC,OAAOzC,MAAQwC,EAAEC,OAAOT,MACnCN,aAAaS,QAAQjB,EAAKwB,UAAWlB,KAAKY,UAAUG,OClBtDnC,EAAKI,KAAKW,iBAAiB,SAVFC,IACvB,MAAMuB,EAAYvB,EAAMqB,OAAOG,QAAQ1C,G,IACvBmB,EAAhB,MAAME,EAAyD,QAA/CF,EAAAG,KAAKC,MAAMC,aAAaC,QAAQT,EAAKU,kBAAU,IAA/CP,IAAmDlB,EAC7D0C,EAAetB,EAAQuB,QAAOC,GAAQA,EAAK7C,KAAOyC,IACpDE,EAAaX,SAAWX,EAAQW,SACpCX,EAAQyB,OAAO,EAAGzB,EAAQW,UAAWW,GACrCzC,EAAKI,KAAKyC,UAAY1B,EAAQ2B,KAAIC,GAAWpD,EAAaoD,KAAUC,KAAK,IACzE1B,aAAaS,QAAQjB,EAAKU,SAAUJ,KAAKY,UAAUS,QCJrD,MAAMQ,EAAS3B,aAAaC,QAAQT,EAAKU,UACnC0B,EAAc9B,KAAKC,MAAM4B,GAEzBE,GAAeD,UAAenD,GAAM+C,KAAIC,GAAWpD,EAAaoD,KAEtE/C,EAAKI,KAAKyB,mBAAmB,aAAcsB,EAAYH,KAAK,KAK5D,MAAMI,EAAW9B,aAAaC,QAAQT,EAAKwB,WACvClB,KAAKC,MAAM+B,KACXpD,EAAKC,KAAKyB,SAAS9B,KAAKgC,MAAQR,KAAKC,MAAM+B,GAAUxD,KACrDI,EAAKC,KAAKyB,SAAS7B,OAAO+B,MAAQR,KAAKC,MAAM+B,GAAUvD","sources":["src/js/createMarkup.js","src/js/data.js","src/js/refs.js","node_modules/nanoid/index.browser.js","src/js/local-storage-keys.js","src/js/submit-form.js","src/js/delete-button-event.js","src/index.js"],"sourcesContent":["const createMarkup = ({ name, number, id }) => `<li class=\"contact-list__item\">\n<p class=\"contact-list__name\">${name}</p>\n<p class=\"contact-list__number\">${number}</p>\n<button data-id=\"${id}\" class=\"contact-list__button\" type=\"button\">\n  &#9785;\n</button>\n</li>`;\n\nexport default createMarkup;\n","const data = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nexport default data;\n","const refs = {\n  form: document.getElementById('form'),\n  list: document.getElementById('contact-list'),\n};\n\nexport default refs;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","const CONTACTS = 'contacts';\nconst FORM_DATA = 'form-data';\n\nexport default {CONTACTS, FORM_DATA};","import refs from './refs';\nimport data from './data';\nimport { nanoid } from 'nanoid';\nimport createMarkup from './createMarkup';\nimport keys from './local-storage-keys.js';\n\nconst submitForm = event => {\n  event.preventDefault();\n\n  const newData = JSON.parse(localStorage.getItem(keys.CONTACTS)) ?? data;\n\n  const { name, number } = event.currentTarget.elements;\n  if (!name || !number) {\n    alert('Заповніть всі поля');\n    return;\n  }\n  newData.push({ name: name.value, number: number.value, id: nanoid() });\n  refs.list.insertAdjacentHTML(\n    'beforeend',\n    createMarkup(newData[newData.length - 1])\n  );\n\n  localStorage.setItem(keys.CONTACTS, JSON.stringify(newData));\n\n  event.currentTarget.reset();\n};\n\nrefs.form.addEventListener('submit', submitForm);\n\nconst formData = { name: '', number: '' };\n\nconst onChangeInput = e => {  \n  formData[e.target.name] = e.target.value;\n  localStorage.setItem(keys.FORM_DATA, JSON.stringify(formData));\n};\nrefs.form.addEventListener('input', onChangeInput);\n","import refs from './refs';\nimport data from './data';\nimport createMarkup from './createMarkup';\nimport keys from './local-storage-keys';\n\nconst onClickDeleteBtn = event => {\n  const contactID = event.target.dataset.id;\n  const newData = JSON.parse(localStorage.getItem(keys.CONTACTS)) ?? data\n  const filteredData = newData.filter(item => item.id !== contactID);  \n  if (filteredData.length === newData.length) return;\n  newData.splice(0, newData.length, ...filteredData);\n  refs.list.innerHTML = newData.map(contact => createMarkup(contact)).join('');\n  localStorage.setItem(keys.CONTACTS, JSON.stringify(filteredData));\n};\n\nrefs.list.addEventListener('click', onClickDeleteBtn);\n","import createMarkup from './js/createMarkup';\nimport data from './js/data';\nimport refs from './js/refs';\n\nimport './js/submit-form';\nimport './js/delete-button-event';\nimport keys from './js/local-storage-keys';\n\nconst source = localStorage.getItem(keys.CONTACTS);\nconst sourceParse = JSON.parse(source);\n\nconst contactList = (sourceParse ?? data).map(contact => createMarkup(contact));\n\nrefs.list.insertAdjacentHTML('afterbegin', contactList.join(''));\n\n// localStorage.setItem('contacts', JSON.stringify(data));\n\n// console.log(JSON.parse(localStorage.getItem('contacts')));\nconst formData = localStorage.getItem(keys.FORM_DATA);\nif (JSON.parse(formData)) {\n    refs.form.elements.name.value = JSON.parse(formData).name;\n    refs.form.elements.number.value = JSON.parse(formData).number;\n}"],"names":["$bb2db7a89a40ba72$export$2e2bcd8739ae039","name","number","id","$deb185f198c84388$export$2e2bcd8739ae039","$ee27a4d7c64fc8c4$export$2e2bcd8739ae039","form","document","getElementById","list","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","$b0dcbf094dfb99f5$export$2e2bcd8739ae039","addEventListener","event","ref","preventDefault","newData","JSON","parse","localStorage","getItem","CONTACTS","currentTarget","elements","push","value","insertAdjacentHTML","length","setItem","stringify","reset","alert","$85be626fd3469180$var$formData","e","target","FORM_DATA","contactID","dataset","filteredData","filter","item","splice","innerHTML","map","contact","join","$1f0dc3b9307be026$var$source","$1f0dc3b9307be026$var$sourceParse","$1f0dc3b9307be026$var$contactList","$1f0dc3b9307be026$var$formData"],"version":3,"file":"index.0151aa09.js.map"}