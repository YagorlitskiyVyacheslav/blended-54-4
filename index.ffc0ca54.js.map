{"mappings":"AACO,IAkBIA,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC9BL,MAAMG,EAAO,CACX,CAAEJ,GAAI,OAAQK,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEN,GAAI,OAAQK,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEN,GAAI,OAAQK,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEN,GAAI,OAAQK,KAAM,iBAAkBC,OAAQ,cAG1CC,EAAO,CACXC,KAAMC,SAASC,eAAe,QAC9BC,KAAMF,SAASC,eAAe,iBAG1BE,EAAe,EAACP,KAAEA,EAAIC,OAAEA,EAAMN,GAAEA,KAAS,kEACfK,0CACEC,2BACfN,8EAKba,EAAcT,EAAKU,KAAIC,GAAWH,EAAaG,KAErDR,EAAKI,KAAKK,mBAAmB,aAAcH,EAAYI,KAAK,KAiB5DV,EAAKC,KAAKU,iBAAiB,UAfRC,IACjBA,EAAMC,iBACN,MAAMf,KAAEA,EAAIC,OAAEA,GAAWa,EAAME,cAAcC,SACxCjB,GAASC,GAIdF,EAAKmB,KAAK,CAAElB,KAAMA,EAAKmB,MAAOlB,OAAQA,EAAOkB,MAAOxB,GAAIN,MACxDa,EAAKI,KAAKK,mBACR,YACAJ,EAAaR,EAAKA,EAAKqB,OAAS,KAElCN,EAAME,cAAcK,SARlBC,MAAM,yBAqBVpB,EAAKI,KAAKO,iBAAiB,SARFC,IACvB,MAAMS,EAAYT,EAAMU,OAAOC,QAAQ9B,GACjC+B,EAAU3B,EAAK4B,QAAOC,GAAQA,EAAKjC,KAAO4B,IAC5CG,EAAQN,SAAWrB,EAAKqB,SAC5BrB,EAAK8B,OAAO,EAAG9B,EAAKqB,UAAWM,GAC/BxB,EAAKI,KAAKwB,UAAY/B,EAAKU,KAAIC,GAAWH,EAAaG,KAAUE,KAAK","sources":["node_modules/nanoid/index.browser.js","src/index.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nconst data = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst refs = {\n  form: document.getElementById('form'),\n  list: document.getElementById('contact-list'),\n};\n\nconst createMarkup = ({ name, number, id }) => `<li class=\"contact-list__item\">\n<p class=\"contact-list__name\">${name}</p>\n<p class=\"contact-list__number\">${number}</p>\n<button data-id=\"${id}\" class=\"contact-list__button\" type=\"button\">\n  &#9785;\n</button>\n</li>`;\n\nconst contactList = data.map(contact => createMarkup(contact));\n\nrefs.list.insertAdjacentHTML('afterbegin', contactList.join(''));\n\nconst submitForm = event => {\n  event.preventDefault();\n  const { name, number } = event.currentTarget.elements;\n  if (!name || !number) {\n    alert('Заповніть всі поля');\n    return;\n  }\n  data.push({ name: name.value, number: number.value, id: nanoid() });\n  refs.list.insertAdjacentHTML(\n    'beforeend',\n    createMarkup(data[data.length - 1])\n  );\n  event.currentTarget.reset();\n};\n\nrefs.form.addEventListener('submit', submitForm);\n\nconst onClickDeleteBtn = event => {\n  const contactID = event.target.dataset.id;\n  const newData = data.filter(item => item.id !== contactID);\n  if (newData.length === data.length) return;\n  data.splice(0, data.length, ...newData);\n  refs.list.innerHTML = data.map(contact => createMarkup(contact)).join('');\n};\n\nrefs.list.addEventListener('click', onClickDeleteBtn);\n"],"names":["$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$1f0dc3b9307be026$var$data","name","number","$1f0dc3b9307be026$var$refs","form","document","getElementById","list","$1f0dc3b9307be026$var$createMarkup","$1f0dc3b9307be026$var$contactList","map","contact","insertAdjacentHTML","join","addEventListener","event","preventDefault","currentTarget","elements","push","value","length","reset","alert","contactID","target","dataset","newData","filter","item","splice","innerHTML"],"version":3,"file":"index.ffc0ca54.js.map"}